name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  # ===== Linux (Docker) - build, test, and cppcheck using your images =====
  linux-docker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [clang, gcc]   # matches Dockerfile.clang / Dockerfile.gcc
        config:   [debug, release]
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image (${{ matrix.compiler }})
        run: docker build -f Dockerfile.${{ matrix.compiler }} -t cpp-ci-${{ matrix.compiler }} .

      - name: Configure & Build (${{ matrix.compiler }} / ${{ matrix.config }})
        run: >
          docker run --rm
          -v ${{ github.workspace }}:/project
          -w /project
          cpp-ci-${{ matrix.compiler }}
          bash -lc "cmake --preset linux-${{ matrix.compiler }}-${{ matrix.config }} &&
                    cmake --build out/build/linux-${{ matrix.compiler }}-${{ matrix.config }}"

      - name: Cppcheck (${{ matrix.compiler }} / ${{ matrix.config }})
        run: |
          docker run --rm -v ${{ github.workspace }}:/project -w /project cpp-ci-${{ matrix.compiler }} bash -s <<'BASH'
          set -euo pipefail
          BUILD_DIR="out/build/linux-${{ matrix.compiler }}-${{ matrix.config }}"
          TARGET=()

          # Prefer compile_commands.json; fall back to include/test scan
          if [ -f "$BUILD_DIR/compile_commands.json" ]; then
            TARGET=( --project="$BUILD_DIR/compile_commands.json" )
          else
            TARGET=( include test -I include --language=c++ --std=c++23 )
          fi

          # Let cppcheck decide pass/fail; analyze as C++23
          cppcheck "${TARGET[@]}" \
            --std=c++23 --language=c++ \
            --enable=warning,style,performance,portability,information,missingInclude \
            --inline-suppr --suppress=missingIncludeSystem \
            --error-exitcode=2 -q
          BASH

      - name: Run tests (${{ matrix.compiler }} / ${{ matrix.config }})
        run: >
          docker run --rm
          -v ${{ github.workspace }}:/project
          -w /project
          cpp-ci-${{ matrix.compiler }}
          ./out/build/linux-${{ matrix.compiler }}-${{ matrix.config }}/statistics_test

  # ===== Windows - Cppcheck quick pass =====
  windows-cppcheck:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install cppcheck (and jq for optional use)
        shell: pwsh
        run: |
          choco install cppcheck -y
          choco install jq -y

      - name: Run cppcheck (Windows)
        shell: pwsh
        run: |
          # Ensure choco shims & Program Files path are visible
          $env:Path += ';C:\ProgramData\chocolatey\bin;C:\Program Files\Cppcheck'
          # Quick lint over your code (include/ and test/), fail on real errors
          cppcheck include test -I include --language=c++ --std=c++23 `
            --enable=warning,style,performance,portability,information,missingInclude `
            --inline-suppr --suppress=missingIncludeSystem `
            --error-exitcode=2 -q

  # ===== Windows - configure, build, and test with MSVC (Debug & Release) =====
  windows-msvc:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        config: [Debug, Release]
    steps:
      - uses: actions/checkout@v4

      - name: Install Ninja
        shell: pwsh
        run: choco install ninja -y

      - name: Set up MSVC (x64)
        uses: ilammy/msvc-dev-cmd@v1
        with:
            arch: x64

      - name: Configure (${{ matrix.config }})
        shell: pwsh
        run: |
          cmake -S . -B build-msvc-${{ matrix.config }} -G "Ninja" `
            -DCMAKE_BUILD_TYPE=${{ matrix.config }}

      - name: Build (${{ matrix.config }})
        run: cmake --build build-msvc-${{ matrix.config }}

      - name: Test (${{ matrix.config }})
        run: ctest --test-dir build-msvc-${{ matrix.config }} --output-on-failure
