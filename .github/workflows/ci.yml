name: CI

on:
  push:
  pull_request:
  workflow_dispatch:
jobs:
  # ===== Linux (Docker) - build, test, and cppcheck using your images =====
  linux-docker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        compiler: [clang, gcc]   # matches Dockerfile.clang / Dockerfile.gcc
        config:   [debug, release]
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image (${{ matrix.compiler }})
        run: docker build -f Dockerfile.${{ matrix.compiler }} -t cpp-ci-${{ matrix.compiler }} .

      - name: Configure & Build (${{ matrix.compiler }} / ${{ matrix.config }})
        run: >
          docker run --rm
          -v ${{ github.workspace }}:/project
          -w /project
          cpp-ci-${{ matrix.compiler }}
          bash -lc "cmake --preset linux-${{ matrix.compiler }}-${{ matrix.config }} &&
                    cmake --build out/build/linux-${{ matrix.compiler }}-${{ matrix.config }}"

      - name: Cppcheck (${{ matrix.compiler }} / ${{ matrix.config }})
        run: |
          docker run --rm -v ${{ github.workspace }}:/project -w /project cpp-ci-${{ matrix.compiler }} bash -lc '
            set -euo pipefail
            BUILD_DIR="out/build/linux-${{ matrix.compiler }}-${{ matrix.config }}"
            TARGET=()

            # Prefer compile_commands.json (optionally filtered to include/ and test/)
            if [ -f "$BUILD_DIR/compile_commands.json" ]; then
              if command -v jq >/dev/null 2>&1; then
                jq '"'"'[ .[] | select(.file | test("^(?:/project/)?(include|test)/")) ]'"'"' \
                  "$BUILD_DIR/compile_commands.json" > "$BUILD_DIR/compile_commands.local.json"
                TARGET=( --project="$BUILD_DIR/compile_commands.local.json" )
              else
                TARGET=( --project="$BUILD_DIR/compile_commands.json" )
              fi
            else
              TARGET=( include test -I include --language=c++ --std=c++23 )
            fi

            # Let cppcheck decide pass/fail; analyze as C++23
            cppcheck "${TARGET[@]}" \
              --std=c++23 --language=c++ \
              --enable=warning,style,performance,portabilit
